searchState.loadedDescShard("vibe_ticket", 0, "vibe-ticket - A high-performance ticket management system …\nREST API layer for vibe-ticket\nCLI module for vibe-ticket\nConfiguration management for vibe-ticket\nCore business logic for vibe-ticket\nEvent system for CLI-MCP synchronization\nCLI-MCP integration module\nModel Context Protocol (MCP) server implementation for …\nPlugin system for vibe-ticket\nSpec-Driven Development (仕様駆動開発) module\nStorage layer for vibe-ticket\nThread-safe in-memory cache for tickets\nCaches all tickets\nCaches a single ticket\nRemoves expired entries from the cache\nReturns the argument unchanged.\nGets all tickets from cache\nGets a single ticket from cache\nCalls <code>U::from(self)</code>.\nInvalidates all cached data\nInvalidates a specific ticket in the cache\nCreates a new cache with the specified TTL\nCreates a new cache with a default TTL of 5 minutes\nSet active specification\nAdd a new task to a ticket\nApprove a specification phase\nArchive or unarchive tickets\nCheck the current status\nGenerate or update CLAUDE.md for AI assistance\nvibe-ticket: A high-performance ticket management system …\nClose the current ticket\nComplete a task\nManage project configuration\nDelete a specification\nCreate or update design document\nEdit a ticket\nExport tickets\nGet configuration value\nImport tickets\nInitialize a new vibe-ticket project\nInitialize a new specification\nList all tickets\nList tasks in a ticket\nList all specifications\nList all worktrees for vibe-ticket\nModel Context Protocol (MCP) server\nCreate a new ticket\nShow open tickets (alias for list –open)\nOutput formatter for CLI commands\nProgress bar for long-running operations\nPrune stale worktrees\nRemove a task\nRemove a worktree\nCreate or update requirements document\nReset configuration to defaults\nSearch tickets\nStart MCP server\nSet configuration value\nShow ticket details\nShow current configuration\nShow specification details\nManage specifications (spec-driven development)\nStart working on a ticket\nShow specification status\nManage tasks within a ticket\nCreate or update implementation tasks\nUncomplete a task\nManage Git worktrees for tickets\nPrints an error message\nGets the project root directory\nCompletes the progress bar\nFormats duration in a human-readable way\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the default editor from environment variables\nGets the .vibe-ticket directory path\nCommand handlers for the CLI\nIncrements the progress by 1\nPrints an info message\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if JSON output is enabled\nPrint JSON output\nUse JSON output format\nCreates a new output formatter\nCreates a new progress bar\nDisable color output\nOpens a URL in the default browser\nParses comma-separated tags\nPrints data as JSON\nPrints a ticket\nPrints a list of tickets\nCreate a progress bar\nPath to the project directory\nGenerates a slug from a title\nPrints a success message\nUpdates the progress\nValidates a ticket slug\nEnable verbose output\nPrints a warning message\nAdd tags (comma-separated)\nArchive the ticket\nShow archived tickets\nFilter by assignee\nCreate a new Git branch\nCustom branch name (default: ticket-{slug})\nGenerate CLAUDE.md for AI assistance\nProject description\nTicket description\nNew description\nSearch in description only\nShow detailed information\nDry run (don’t actually import)\nOpen in editor\nInput file\nForce initialization even if already initialized\nOutput format (json, yaml, csv, markdown)\nInput format (json, yaml, csv)\nShow history\nInclude archived tickets\nInclude done tickets (by default they are hidden)\nLimit number of results\nLimit number of results\nShow in markdown format\nClose message\nProject name\nDisable worktree creation and only create a branch\nShow only open tickets (todo, doing)\nOutput file (defaults to stdout)\nCreate a merge/pull request\nPriority (low, medium, high, critical)\nFilter by priority (low, medium, high, critical)\nNew priority\nSearch query\nUse regex\nRemove tags (comma-separated)\nReverse sort order\nReverse sort order\nFilter tickets created since (e.g., “yesterday”, “2 …\nSkip validation\nTicket slug (e.g., fix-login-bug)\nSort by field (created, updated, priority, status, slug)\nSort by field (created, updated, priority, status, slug)\nStart working on the ticket immediately\nInclude statistics\nFilter by status (todo, doing, done, blocked, review)\nNew status\nTags (comma-separated)\nSearch in tags only\nShow tasks\nTicket ID or slug\nTicket ID or slug (defaults to active ticket)\nTicket ID or slug (defaults to active ticket)\nTicket ID or slug\nTicket ID or slug\nTicket title\nNew title\nSearch in title only\nUnarchive instead of archive\nFilter tickets created until (e.g., “today”, “1 week …\nCreate a Git worktree (use –no-worktree to disable)\nAppend to existing CLAUDE.md instead of overwriting\nConfirm reset\nShow specific key\nConfiguration key (e.g., project.name, ui.emoji)\nConfiguration key\nOutput path for CLAUDE.md (defaults to project root)\nTemplate to use (basic, advanced)\nValue to set\nRun as daemon\nHost to bind to\nPort to listen on\nShow all documents\nShow archived specs\nMark as complete\nMark as complete\nMark as complete\nSpecification description\nShow detailed progress\nOpen in editor\nOpen in editor\nOpen in editor\nExport tasks to tickets\nForce deletion without confirmation\nShow in markdown format\nApproval message\nFilter by phase (requirements, design, tasks)\nPhase to approve (requirements, design, tasks)\nSpecification ID (defaults to active spec)\nSpecification ID (defaults to active spec)\nSpecification ID (defaults to active spec)\nSpecification ID (defaults to active spec)\nSpecification ID\nSpecification ID\nSpecification ID\nSpecification ID\nFilter by status (draft, <code>in_progress</code>, completed, approved)\nInitial tags (comma-separated)\nAssociated ticket ID\nSpecification title\nShow completed tasks only\nForce removal without confirmation\nShow incomplete tasks only\nTask ID\nTask ID\nTask ID\nTicket ID or slug (defaults to active ticket)\nTicket ID or slug (defaults to active ticket)\nTicket ID or slug (defaults to active ticket)\nTicket ID or slug (defaults to active ticket)\nTicket ID or slug (defaults to active ticket)\nTask title\nShow worktrees for all tickets\nDry run - show what would be removed\nForce removal even if there are uncommitted changes\nRemove worktrees without confirmation\nKeep the branch associated with the worktree\nRemove branches for pruned worktrees\nFilter by status (active, stale, orphaned)\nShow detailed information\nWorktree path or ticket ID/slug\nCommon trait for command handlers\nHelper function to ensure a project is initialized\nExecute the command with the given formatter\nHelper function to get the active ticket ID\nHandler for the <code>archive</code> command\nHandler for the <code>check</code> command\nHandler for the <code>close</code> command\nHandler for the <code>config</code> subcommands\nHandler for the <code>edit</code> command\nHandler for the <code>export</code> command\nHandler for the <code>import</code> command\nHandle the init command\nHandler for the <code>list</code> command\nHandler for the <code>new</code> command\nHandler for the <code>search</code> command\nHandler for the <code>show</code> command\nHandle spec activate command\nHandle spec approve command\nHandle spec delete command\nHandle spec design command\nHandle spec init command\nHandle spec list command\nHandle spec requirements command\nHandle spec show command\nHandle spec status command\nHandle spec tasks command\nHandler for the <code>start</code> command\nHandler for the <code>task add</code> subcommand\nHandler for the <code>task complete</code> subcommand\nHandler for the <code>task list</code> subcommand\nHandler for the <code>task remove</code> subcommand\nHandler for the <code>task uncomplete</code> subcommand\nHandle the worktree list command\nHandle the worktree prune command\nHandle the worktree remove command\nFormat tags from a comma-separated string\nHelper function to resolve a ticket identifier\nResolve a ticket reference (ID, partial ID, or slug) to a …\nValidate a slug format\nMain configuration structure for vibe-ticket\nGit integration configuration\nPlugin configuration\nProject-specific configuration\nUI configuration\nAuto-create branches when starting tickets\nBranch prefix for tickets\nCommit message template\nDate format\nDefault assignee for new tickets\nDefault priority for new tickets\nProject description\nPlugin directory\nEnable emoji in output\nEnable Git integration\nEnabled plugins\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGit integration configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad configuration from the default location\nLoad configuration from a specific path\nLoad configuration or return default if not found\nProject name\nDefault page size for list commands\nPlugin configuration\nProject configuration\nSave configuration to the default location\nSave configuration to a specific path\nColor theme (light/dark/auto)\nUI configuration\nAutomatically cleanup worktree when closing ticket\nUse worktree by default when starting tickets\nEnable Git worktree integration\nWorktree directory prefix (use {project} as placeholder)\nTicket is blocked by external dependencies\nCritical priority - requires immediate attention\nWork is actively being done on the ticket\nWork on the ticket is completed\nHigh priority - should be addressed soon\nLow priority - can be deferred\nMedium priority - normal workflow\nRepresents the priority level of a ticket\nTicket is in review/QA phase\nRepresents the current status of a ticket\nRepresents a task within a ticket\nUnique identifier for a task\nRepresents a ticket in the vibe-ticket system\nUnique identifier for a ticket\nTicket is created but work hasn’t started\nAdds a task to the ticket\nReturns the duration since the task was created\nReturns all possible priority values\nReturns all possible status values\nReturns the inner UUID\nReturns the inner UUID\nUsername of the person assigned to the ticket\nReturns whether the status allows starting work\nCloses the ticket, updating status and timestamp\nTimestamp when the ticket was closed\nReturns the color code for terminal output\nReturns the color code for terminal output\nMarks the task as completed\nMarks a task as completed\nWhether the task has been completed\nTimestamp when the task was completed\nReturns the number of completed tasks\nReturns the duration the task took to complete\nCalculates the completion percentage\nTimestamp when the task was created\nTimestamp when the ticket was created\nDetailed description of the work to be done\nReturns the duration the ticket has been open\nReturns the emoji representation of the priority\nReturns the emoji representation of the status\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ID from a UUID\nCreates an ID from a UUID\nUnique identifier for the task\nUnique identifier for the ticket\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the status represents active work\nReturns whether the status represents completed work\nReturns whether this priority requires immediate attention\nAdditional metadata for extensibility\nCreates a new random ID\nCreates a new random ID\nCreates a new task with the given title\nCreates a new ticket with the given slug and title\nParses an ID from a string\nParses an ID from a string\nPriority level of the ticket\nReturns a shortened version of the ID for display\nReturns a shortened version of the ID for display\nURL-friendly slug derived from the title\nStarts work on the ticket, updating status and timestamp\nTimestamp when work started on the ticket\nCurrent status of the ticket\nTags for categorization and filtering\nList of tasks associated with this ticket\nTitle describing what needs to be done\nHuman-readable title of the ticket\nReturns the total number of tasks\nMarks the task as incomplete\nReturns the numeric value for sorting (higher = more …\nCreates a new task with a specific ID (useful for …\nCreates a new ticket with a specific ID (useful for …\nReturns the working duration (from start to close/now)\nConfiguration errors\nGeneric error with custom message\nDuplicate ticket\nContains the error value\nError context extension trait\nFile operation error\nGit operation errors\nInvalid input\nInvalid priority\nInvalid slug format\nInvalid ticket status\nI/O related errors\nJSON serialization/deserialization errors\nMultiple active tickets\nNo active specification\nNo active ticket\nContains the success value\nPermission denied\nProject already initialized\nProject not initialized\nResult type alias for vibe-ticket operations\nSpecification not found\nTask not found\nTemplate error\nTicket not found\nUUID parsing error\nMain error type for vibe-ticket\nYAML serialization/deserialization errors\nAdds context to the error\nCreates a custom error with the given message\nCreates a deserialization error with consistent formatting\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an I/O error with consistent formatting\nReturns true if this error is a configuration issue\nReturns true if this error is recoverable\nCreates a parsing error with consistent formatting\nCreates a serialization error with consistent formatting\nReturns suggested actions for the error\nReturns a user-friendly error message\nAdds context with a lazy message\nA ticket was closed\nA new ticket was created\nEvent bus for distributing events to handlers\nTrait for handling ticket events\nTicket status changed\nA task was added to a ticket\nA task was completed\nA task was removed\nEvents that can be emitted by CLI operations\nAn existing ticket was updated\nEmit an event to all registered handlers\nEmit an event to the global event bus\nGet the global event bus\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a ticket event\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new event bus\nRegister an event handler\nEvent types for CLI-MCP communication\nIntegration service that bridges CLI and MCP\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the integration service\nGet the integration service\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new integration service\nHelper function to notify about status change\nNotify about a status change\nHelper function to notify about ticket closure\nNotify about a ticket closure\nHelper function to notify about ticket creation\nNotify about a ticket creation\nHelper function to notify about ticket update\nNotify about a ticket update\nGet an event receiver\nAuthentication middleware for MCP server\nConfiguration for MCP server\nMCP tool handlers for vibe-ticket operations\nMCP server implementation\nMCP service implementation for vibe-ticket\nAuthentication middleware\nAuthenticate a request\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new authentication middleware\nAuthentication configuration\nMCP server configuration\nServer configuration\nStandard input/output\nTCP socket\nTransport type for MCP server\nWebSocket\nAPI key for authentication\nAuthentication configuration\nEnable authentication\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHost to bind to\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPort to listen on\nServer configuration\nTicket storage path\nTransport type (stdio, tcp, websocket)\nAuthentication failed\nServer configuration error\nConnection error\nContains the error value\nInvalid parameters provided to a tool\nIO error\nMCP-specific error type\nResult type alias for MCP operations\nContains the success value\nMCP protocol error\nRate limit exceeded\nSerialization/deserialization error\nGeneric server error\nStorage operation failed\nTool not found\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration management MCP tool handlers\nMCP event handler for CLI operations\nHelper functions for creating MCP tool schemas\nSearch and export MCP tool handlers\nSpec-driven development MCP tool handlers\nTask management MCP tool handlers\nTicket management MCP tool handlers\nWorktree management MCP tool handlers\nHandle setting configuration\nHandle showing configuration\nRegister all configuration management tools\nMCP event handler that processes CLI events\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MCP event handler\nConvert a JSON value to a Map for use as tool schema\nHandle exporting tickets\nHandle importing tickets\nHandle searching tickets\nRegister all search and export tools\nHandle adding specifications\nHandle checking specification status\nHandle updating specifications\nRegister all spec-driven development tools\nHandle adding a task\nHandle completing a task\nHandle listing tasks\nHandle removing a task\nRegister all task management tools\nHandle checking current status\nHandle closing a ticket\nHandle editing a ticket\nHandle listing tickets\nHandle creating a new ticket\nHandle showing ticket details\nHandle starting work on a ticket\nRegister all ticket management tools\nHelper to resolve ticket reference (ID or slug)\nHandle listing worktrees\nHandle pruning stale worktrees\nHandle removing a worktree\nRegister all worktree management tools\nMCP server for vibe-ticket\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MCP server\nStart the MCP server\nStart server with stdio transport\nMCP service implementation\nReturns the argument unchanged.\nGet all available tools\nCalls <code>U::from(self)</code>.\nCreate a new service instance\nAll phases completed\nTechnical design phase\nTechnical design document\nImplementation planning phase\nInitial phase - no documents created yet\nRequirements definition phase\nRequirements definition document\nSpecification document type\nSpecification metadata and progress tracking\nCurrent phase of the specification\nProgress tracking for spec documents\nVersion information for spec documents\nA complete specification with all documents\nTasks phase (alias for Implementation)\nImplementation plan/tasks document\nApproval status with additional metadata\nIncrement major version (resets minor and patch)\nIncrement minor version (resets patch)\nIncrement patch version\nCreation timestamp\nGet the current phase\nCurrent phase\nBrief description\nTechnical design content\nDesign approval status\nTechnical design completed\nGet display name\nGet file name for this document type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique spec ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMajor version (breaking changes)\nSpecification manager for handling spec lifecycle\nMetadata\nMinor version (new features)\nCreate new spec metadata\nCreate a new specification\nPatch version (bug fixes)\nProgress tracking\nRequirements definition content\nRequirements approval status\nRequirements definition completed\nGeneric storage traits and implementations for …\nTags for categorization\nImplementation plan content\nTasks approval status\nImplementation plan completed\nTemplate engine for spec documents\nAssociated ticket ID (if any)\nSpec title\nUpdate the current phase based on progress\nLast update timestamp\nVersion information\nManages specifications in a project\nApprove a document phase\nCreate a new specification\nDelete a specification\nDelete a specification (alias for <code>delete_spec</code>)\nDelete a specification\nFind spec by title (partial match)\nReturns the argument unchanged.\nGet active specification ID\nGet document path for a specification\nGet document path\nInitialize the specs directory structure\nCalls <code>U::from(self)</code>.\nList all specifications\nList specifications (alias for <code>list_specs</code>)\nList all specifications\nLoad a specification\nLoad a specification (alias for <code>load_spec</code>)\nLoad a specification by ID\nCreate a new spec manager\nSave a specification document\nSave a complete specification\nSave a document for a specification\nSet active specification\nGeneric document operations helper\nTrait for document storage operations\nFile system based document store\nGet the base directory\nEnsure directory exists\nCheck if a path exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet subdirectory path\nInitialize base directory\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList directory entries\nList all subdirectories\nLoad a document from a subdirectory\nLoad a deserializable document\nLoad text content\nLoad text from a subdirectory\nCreate new document operations helper\nSave a document in a subdirectory\nSave a serializable document\nSave text content\nSave text in a subdirectory\nTechnical design template\nRequirements definition template\nSpecification document template\nImplementation plan template\nTemplate engine for generating spec documents\nGet template content\nCreate a template for a document type\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate document from template\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new template engine\nSet a template variable\nRepository trait for managing the active ticket\nA file lock that automatically releases on drop\nFile-based storage implementation for tickets\nA guard that holds a lock and automatically releases it …\nProject state stored in the .vibe-ticket directory\nCombined repository trait\nRepository trait for ticket storage operations\nAttempts to acquire a lock for the given path\nClears the active ticket\nClears the active ticket with locking\nCounts tickets matching a predicate\nCreation timestamp\nDeletes a ticket by ID\nDeletes a ticket from storage with locking\nProject description\nEnsures the storage directories exist\nChecks if a ticket exists by ID\nFinds tickets matching a predicate\nFinds a ticket by its slug\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the active ticket ID\nGets the active ticket ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a ticket by ID\nLoads all tickets\nLoads all tickets from storage\nLoads the project state\nLoads a ticket from storage by ID with read locking\nProject name\nCreates a new lock guard\nCreates a new <code>FileStorage</code> instance\nReleases the lock explicitly\nSaves a ticket to the repository\nSaves the project state\nSaves a ticket to storage with file locking for concurrent …\nSets the active ticket ID\nSets the active ticket with locking\nTotal number of tickets created (for ID generation)\nChecks if a ticket with the given slug already exists\nLast modified timestamp")